<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
    <bean id="wpsServiceLoader" class="org.geoserver.wps.WPSXStreamLoader">
        <constructor-arg ref="resourceLoader"/>
    </bean>

    <!-- TODO: remove this thing -->    
    <bean id="wpsServiceLegacyLoader" class="org.geoserver.wps.WPSLegacyLoader"/>

    <!-- WPS Service -->
    

    <bean id="wpsService" class="org.geoserver.wps.DefaultWebProcessingService">
        <constructor-arg ref="geoServer" />
    </bean>

    <!-- Service Descriptor(s) -->
    <bean id="wpsService-1.0.0" 
        class="org.geoserver.platform.Service">
        <constructor-arg index="0" value="wps" />
        <constructor-arg index="1" ref="wpsService" />
        <constructor-arg index="2" value="1.0.0" />
        <constructor-arg index="3">
		  <list>
		    <value>GetCapabilities</value>
		    <value>DescribeProcess</value>
		    <value>Execute</value>
		  </list>
		</constructor-arg>
    </bean>

    <!-- KVP Parsers -->
    <bean id="wpsDescribeIdentifierKvpParser"
        class="org.geoserver.wps.kvp.DescribeIdentifierKvpParser" />
    <bean id="wpsExecuteIdentifierKvpParser"
        class="org.geoserver.wps.kvp.ExecuteIdentifierKvpParser" />
    
    <!-- KVP Request Readers -->
    <bean id="wpsGetCapabilitiesKvpReader"
        class="org.geoserver.wps.kvp.GetCapabilitiesKvpRequestReader" />
    <bean id="wpsDescribeProcessKvpReader"
        class="org.geoserver.wps.kvp.DescribeProcessKvpRequestReader" />
    <bean id="executeKvpRequestReader" class="org.geoserver.wps.kvp.ExecuteKvpRequestReader"/>
    

    <!-- XML Configuration -->
    <bean id="wpsXmlConfiguration-1.0.0"
        class="org.geoserver.wps.xml.WPSConfiguration" >
    </bean>

    <!-- XML Readers -->
    <bean id="wpsXmlReader-1.0.0"
        class="org.geoserver.wps.xml.v1_0_0.WpsXmlReader" abstract="true">
        <constructor-arg ref="wps" />
        <constructor-arg ref="wpsXmlConfiguration-1.0.0" />
    </bean>
    <bean id="wpsGetCapabilitiesXmlReader-1.0.0"
        class="org.geoserver.wps.xml.v1_0_0.WpsXmlReader">
        <constructor-arg index="0" value="GetCapabilities" />
        <constructor-arg index="1" value="1.0.0" />
        <constructor-arg index="2" ref="wpsXmlConfiguration-1.0.0" />
    </bean>
    <bean id="wpsDescribeProcessXmlReader-1.0.0"
        class="org.geoserver.wps.xml.v1_0_0.WpsXmlReader">
        <constructor-arg index="0" value="DescribeProcess" />
        <constructor-arg index="1" value="1.0.0" />
        <constructor-arg index="2" ref="wpsXmlConfiguration-1.0.0" />
    </bean>
    <bean id="wpsExecuteXmlReader-1.0.0"
        class="org.geoserver.wps.xml.v1_0_0.WpsXmlReader">
        <constructor-arg index="0" value="Execute" />
        <constructor-arg index="1" value="1.0.0" />
        <constructor-arg index="2" ref="wpsXmlConfiguration-1.0.0" />
    </bean>
 

    <!-- HTTP URL Mapping -->
    <bean id="wpsURLMapping"
        class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="alwaysUseFullPath" value="true" />
        <property name="mappings">
            <props>
                <prop key="/wps">dispatcher</prop>
                <prop key="/wps/*">dispatcher</prop>
            </props>
        </property>
    </bean>
    
    <!-- responses -->
    <bean id="wpsCapabilitiesResponse" class="org.geoserver.wps.response.WPSObjectEncodingResponse">
      <constructor-arg index="0" value="net.opengis.wps10.WPSCapabilitiesType"/>
      <constructor-arg index="1" value="Capabilities"/>
      <constructor-arg index="2" value="org.geoserver.wps.xml.WPSConfiguration"/> 
    </bean>
    <bean id="wpsDescribeProcessResponse" class="org.geoserver.wps.response.WPSObjectEncodingResponse">
      <constructor-arg index="0" value="net.opengis.wps10.ProcessDescriptionsType"/>
      <constructor-arg index="1" value="ProcessDescriptions"/>
      <constructor-arg index="2" value="org.geoserver.wps.xml.WPSConfiguration"/> 
    </bean>
    <bean id="wpsExecuteResponse" class="org.geoserver.wps.response.ExecuteProcessResponse">
      <constructor-arg index="0" value="net.opengis.wps10.ExecuteResponseType"/>
      <constructor-arg index="1" value="ExecuteResponse"/>
      <constructor-arg index="2" value="org.geoserver.wps.xml.WPSConfiguration"/>
    </bean>
    
    <!-- Exception handler, we need to output ows 1.1 exceptions -->
    <bean id="wpsExceptionHandler" class="org.geoserver.ows.OWS11ServiceExceptionHandler">
      <constructor-arg index="0">
        <list>
          <ref local="wpsService-1.0.0" />
        </list>
      </constructor-arg>
    </bean>
    
    <!-- Resource manager -->
    <bean id="wpsResourceManager" class="org.geoserver.wps.resource.WPSResourceManager"/>
    
    <!-- The PPIO that need to be registered into SPI because of their dependencies -->
    <bean id="shapeZipPPIO" class="org.geoserver.wps.ppio.ShapeZipPPIO">
      <constructor-arg ref="wpsResourceManager"/>
    </bean>
    <bean id="interpolationPPIO" class="org.geoserver.wps.ppio.InterpolationPPIO" />
    <bean id="sldStylePPIO" class="org.geoserver.wps.ppio.SLDStylePPIO" />
    <bean id="urlPPIO" class="org.geoserver.wps.ppio.URLPPIO" />
    <bean id="jaitoolsRangePPIO" class="org.geoserver.wps.ppio.JAIToolsRangePPIO"/>
    
    
    <!-- Register the GeoServer factory and processes -->
    <bean id="geoserverProcessFactory" class="org.geoserver.wps.jts.SpringBeanProcessFactory">
      <constructor-arg index="0" value="GeoServer custom processes"/>
      <constructor-arg index="1" value="gs"/>
      <constructor-arg index="2" value="org.geoserver.wps.gs.GeoServerProcess"/>
    </bean>
    <bean id="boundsProcess" class="org.geoserver.wps.gs.BoundsProcess"/>
    <bean id="nearestProcess" class="org.geoserver.wps.gs.NearestProcess"/>
    <bean id="snapProcess" class="org.geoserver.wps.gs.SnapProcess"/>
    <bean id="importProcess" class="org.geoserver.wps.gs.ImportProcess">
      <constructor-arg index="0" ref="catalog"/>
    </bean>
    <bean id="reprojectProcess" class="org.geoserver.wps.gs.ReprojectProcess"/>
    <bean id="reprojectGeometryProcess" class="org.geoserver.wps.gs.ReprojectGeometry"/>
    <bean id="queryProcess" class="org.geoserver.wps.gs.QueryProcess"/>
    <bean id="aggregateProcess" class="org.geoserver.wps.gs.AggregateProcess"/>
    <bean id="aggregateProcessResultPPIO" class="org.geoserver.wps.gs.AggregateProcessPPIO"/>
    <bean id="countProcess" class="org.geoserver.wps.gs.CountProcess"/>
    <bean id="uniqueProcess" class="org.geoserver.wps.gs.UniqueProcess"/>
    <bean id="simplifyProcess" class="org.geoserver.wps.gs.SimplifyProcess"/>
    <bean id="rasterAsPointCollectionProcess" class="org.geoserver.wps.gs.RasterAsPointCollectionProcess"/>
    <bean id="contourProcess" class="org.geoserver.wps.gs.ContourProcess"/>
    <bean id="polygonExtractionProcess" class="org.geoserver.wps.gs.PolygonExtractionProcess"/>
    <bean id="rclipProcess" class="org.geoserver.wps.gs.RectangularClipProcess"/>
    <bean id="collectGeometriesProcess" class="org.geoserver.wps.gs.CollectGeometries" />
    <bean id="cropCoverageProcess" class="org.geoserver.wps.gs.CropCoverage" />
    <bean id="scaleCoverageProcess" class="org.geoserver.wps.gs.ScaleCoverage" />
    <bean id="styleCoverageProcess" class="org.geoserver.wps.gs.StyleCoverage" />
    <bean id="storeCoverageProcess" class="org.geoserver.wps.gs.StoreCoverage" >
      <constructor-arg index="0" ref="wpsStorageHandler"></constructor-arg>
    </bean>
    <bean id="vectorZonalStatistics" class="org.geoserver.wps.gs.VectorZonalStatistics" />
    <bean id="pointBuffersProces" class="org.geoserver.wps.gs.PointBuffers" />
    <bean id="rasterZonalStatistics" class="org.geoserver.wps.gs.RasterZonalStatistics" />
    <bean id="rangeLookupProcess" class="org.geoserver.wps.gs.RangeLookupProcess" />
    
    
    <!-- 
       ==================================================================
       Deal with temporary files
       ==================================================================
    -->
    
    <!-- Map dispatcher in order to publish the wcsTempStorage directory -->
    <bean id="wpsTempDirDispatcherMapping"
      class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
      <property name="alwaysUseFullPath" value="true" />
      <property name="mappings">
        <props>
          <prop key="/temp/**">filePublisher</prop>
        </props>
      </property>
    </bean>
  
    <!-- Temp storage cleanup -->
    <!-- The actual scheduled task -->
    <bean id="wpsStorageHandler" class="org.geoserver.wps.WPSStorageHandler">
      <constructor-arg index="0" ref="dataDirectory" />
      <property name="expirationDelay" value="300" />
      <!--
        300 seconds, 5 minutes
      -->
    </bean>
  
    <!-- Definition of how often the scheduled task runs -->
    <bean id="wpsStorageHandlerTask"
      class="org.springframework.scheduling.timer.ScheduledTimerTask">
      <!-- wait 10 seconds before starting repeated execution -->
      <property name="delay" value="10000" />
      <!-- run every 60 seconds -->
      <property name="period" value="60000" />
      <property name="timerTask" ref="wpsStorageHandler" />
    </bean>
  
    <!--
      And finally the class that instantiates the scheduled tasks and
      makes them run
    -->
    <bean id="wpstimerFactory" class="org.springframework.scheduling.timer.TimerFactoryBean"
      lazy-init="false">
      <property name="scheduledTimerTasks">
        <list>
          <ref bean="wpsStorageHandlerTask" />
        </list>
      </property>
      <property name="daemon" value="true" />
    </bean>

</beans>