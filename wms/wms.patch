diff --git a/wms/src/main/java/org/geoserver/wms/GetFeatureInfo.java b/wms/src/main/java/org/geoserver/wms/GetFeatureInfo.java
index 69cc570..3011423 100644
--- a/wms/src/main/java/org/geoserver/wms/GetFeatureInfo.java
+++ b/wms/src/main/java/org/geoserver/wms/GetFeatureInfo.java
@@ -60,6 +60,7 @@ import org.geotools.geometry.jts.ReferencedEnvelope;
 import org.geotools.map.WMSMapLayer;
 import org.geotools.parameter.Parameter;
 import org.geotools.referencing.CRS;
+import org.geotools.referencing.CRS.AxisOrder;
 import org.geotools.renderer.lite.MetaBufferEstimator;
 import org.geotools.renderer.lite.RendererUtilities;
 import org.geotools.resources.geometry.XRectangle2D;
@@ -192,16 +193,16 @@ public class GetFeatureInfo {
 
         final List<MapLayerInfo> requestedLayers = request.getQueryLayers();
         // delegate to subclasses the hard work
-        final int x = request.getXPixel();
-        final int y = request.getYPixel();
+        int x = request.getXPixel();
+        int y = request.getYPixel();
         final int buffer = request.getGetMapRequest().getBuffer();
         final Map<String, String> viewParams = request.getGetMapRequest().getViewParams();
         final GetMapRequest getMapReq = request.getGetMapRequest();
         final CoordinateReferenceSystem requestedCRS = getMapReq.getCrs(); // optional, may be null
 
         // basic information about the request
-        final int width = getMapReq.getWidth();
-        final int height = getMapReq.getHeight();
+        int width = getMapReq.getWidth();
+        int height = getMapReq.getHeight();
         final ReferencedEnvelope bbox = new ReferencedEnvelope(getMapReq.getBbox(),
                 getMapReq.getCrs());
         final double scaleDenominator = RendererUtilities.calculateOGCScale(bbox, width, null);
@@ -438,7 +439,7 @@ public class GetFeatureInfo {
     private FeatureCollection identifyVectorLayer(Filter[] filters,
             final int x, final int y, final int buffer, final Map<String, String> viewParams,
             final CoordinateReferenceSystem requestedCRS, final int width, final int height,
-            final ReferencedEnvelope bbox, final FilterFactory2 ff,
+            ReferencedEnvelope bbox, final FilterFactory2 ff,
             List<FeatureCollection> results, int i, final MapLayerInfo layer, final List<Rule> rules,
             final int maxFeatures)
             throws IOException {
@@ -477,11 +478,11 @@ public class GetFeatureInfo {
         if (maxRadius > 0 && radius > maxRadius)
             radius = maxRadius;
 
-        Polygon pixelRect = getEnvelopeFilter(x, y, width, height, bbox, radius);
+        //do the back reprojection before transforming to pixel space, this handles the case of 
+        // the display projection not being ordered x/y
         if ((requestedCRS != null) && !CRS.equalsIgnoreMetadata(dataCRS, requestedCRS)) {
             try {
-                MathTransform transform = CRS.findMathTransform(requestedCRS, dataCRS, true);
-                pixelRect = (Polygon) JTS.transform(pixelRect, transform); // reprojected
+                bbox = bbox.transform(dataCRS, true);
             } catch (MismatchedDimensionException e) {
                 LOGGER.severe(e.getLocalizedMessage());
             } catch (TransformException e) {
@@ -490,6 +491,8 @@ public class GetFeatureInfo {
                 LOGGER.severe(e.getLocalizedMessage());
             }
         }
+        
+        Polygon pixelRect = getEnvelopeFilter(x, y, width, height, bbox, radius);
 
         final FeatureSource<? extends FeatureType, ? extends Feature> featureSource;
         featureSource = layer.getFeatureSource(false);
@@ -762,7 +765,7 @@ public class GetFeatureInfo {
         double ty = (mapExtent.getMinY() * scaleY) + height;
 
         AffineTransform at = new AffineTransform(scaleX, 0.0d, 0.0d, -scaleY, tx, ty);
-
+        
         return at;
     }
 
